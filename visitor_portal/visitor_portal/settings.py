"""
Django settings for visitor_portal project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Load env from .env if present
try:
    from dotenv import load_dotenv  # type: ignore
    load_dotenv(dotenv_path=Path(__file__).resolve().parent.parent / '.env')
except Exception:
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-^4fc#s9i)iue)d2fhdoy7q580+1tg5&qwjv12b6zu#-4j^&=v0')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Allow all hosts in development, restrict in production
ALLOWED_HOSTS_ENV = os.getenv('ALLOWED_HOSTS', '')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_ENV.split(',')]
else:
    ALLOWED_HOSTS = ['*'] if DEBUG else []

# # Twilio credentials (optional; legacy)
# TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID', '')
# TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN', '')
# TWILIO_FROM_NUMBER = os.getenv('TWILIO_FROM_NUMBER', '')

# Fast2SMS credentials
# FAST2SMS_API_KEY = os.getenv('FAST2SMS_API_KEY', '')
# FAST2SMS_SENDER_ID = os.getenv('FAST2SMS_SENDER_ID', 'TXTIND')

# # WhatsApp Business API credentials
# WHATSAPP_API_KEY = os.getenv('WHATSAPP_API_KEY', '')
# WHATSAPP_INSTANCE_ID = os.getenv('WHATSAPP_INSTANCE_ID', '')
# WHATSAPP_TOKEN = os.getenv('WHATSAPP_TOKEN', '')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'visitors',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'visitors.middleware.AdminAccessMiddleware',
]

ROOT_URLCONF = 'visitor_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'visitor_portal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use PostgreSQL if DATABASE_URL is provided, otherwise SQLite
DATABASE_URL = os.getenv('DATABASE_URL', '')

if DATABASE_URL:
    # Parse DATABASE_URL (format: postgres://user:password@host:port/database)
    import dj_database_url
    
    # Ensure SSL is in connection string for Neon
    if 'sslmode=' not in DATABASE_URL:
        if '?' in DATABASE_URL:
            DATABASE_URL = f"{DATABASE_URL}&sslmode=require"
        else:
            DATABASE_URL = f"{DATABASE_URL}?sslmode=require"
    
    # Neon requires SSL and doesn't support statement_timeout in pooled connections
    db_config = dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600,
        conn_health_checks=True,
    )
    
    DATABASES = {'default': db_config}
else:
    # Development: Use SQLite
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Local timezone for correct timestamps in templates and timers
TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',              # e.g., visitor_portal/static
    BASE_DIR.parent / 'static',       # project root static/
]

# WhiteNoise for serving static files in production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media uploads (visitor photos and IDs)
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Auth
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/control/'
LOGOUT_REDIRECT_URL = '/login/'

# Email configuration for OTP and notifications
# Render doesn't support SMTP, so we use Resend API (completely free)
RESEND_API_KEY = os.getenv('RESEND_API_KEY', '')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'onboarding@resend.dev')  # Default Resend email

# Password reset settings   
PASSWORD_RESET_TIMEOUT = 3600  # 1 hour